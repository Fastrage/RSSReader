//
//  FeedViewController.swift
//  RSSReader
//
//  Created Олег Крылов on 03/08/2019.
//  Copyright © 2019 OlegKrylov. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

protocol iFeedView {
    
}


class FeedViewController: UIViewController {
    private let tableView: UITableView = UITableView(frame: .zero)
	private let presenter: FeedPresenterProtocol
    //private var articles: [Article]
    
    init(presenter: FeedPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        let view = UIView()
        view.addSubview(self.tableView)
        self.title = "News"
        self.tableView.dataSource = self
        self.tableView.delegate = self
        self.tableView.register(FeedCell.self, forCellReuseIdentifier: "FeedCell")
        self.tableView.frame = self.view.bounds
        self.view = view
        presenter.view = self
        presenter.viewDidLoad()
    }

}

extension FeedViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let ratio: CGFloat = 1.2
        let width = tableView.frame.width - tableView.contentInset.left - tableView.contentInset.right
        let height = width * ratio
        return height
    }
}

extension FeedViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOfRowsInSection()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FeedCell", for: indexPath) as! FeedCell
        cell.update(with: presenter.itemForRow(at: indexPath))
        return cell
    }   
}

extension FeedViewController: FeedViewProtocol {
    func setupInitialState() {
    }
}
